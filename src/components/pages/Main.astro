---
import Toast from '@components/Toast.astro';
import { supabase } from "@lib/supabase";
import { SetNewMessage } from '@lib/store';
import { fetchData } from '@lib/fetchData';

const { request } = Astro;
let errors = '';
let isLoading: boolean = false;
let text:string = '';
let response: string = '';

async function saveData(result) {
	console.log(result)
	console.log(errors)
	try {
		const {message, result_text_old} = result;

		const {data, error} = await supabase.from('message').upsert({message, response: result_text_old}).select();
		if(error) errors += error.message

		const res = data
		console.log(res)
		SetNewMessage(res?.id, res?.message, res?.response)
		response = res?.response;

	} catch (error) {
		if(error instanceof Error) console.log(error.message)
	}
	return { status: 'success'}
}

if (request.method === 'POST') {
	const formdata = await request.formData()
	text = formdata.get("text")?.toString().trim()

	if(text.length < 1) errors = 'Message is required';

	try {
		isLoading = true
		const result = await fetchData(text)
		if(!result?.status) errors += result?.message;

		await saveData(result)
	} catch (error) {
		if(error instanceof Error) console.log(error.message)
	}
	isLoading = false;
}
---


<section class="h-[580px] w-full px-40 col-span-10 md:col-span-8 bg-[#353441] flex flex-col justify-between items-center text-white">
	<h1 class="text-2xl sm:text-4xl font-bold text-center mt-5">
		¿Cómo puedo ayudarte?
	</h1>
	{errors.length >1 && <Toast message={errors}/>}
	{text && (
		<div class="flex flex-col text-base gap-3 md:px-5 lg:px-1 xl:px-5 w-[90%]">
			<div class="flex relative">
				<div>
					<div class="pt-0.5">
						<div class="gizmo-shadow-stroke flex h-6 w-6 items-center justify-center rounded-full">
							<div class="relative flex">
								YOU
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="relative flex w-full">
				<div class="gap-1 md:gap-3">
					<div class="flex flex-grow max-w-full">
						<div class="min-h-[20px] text-message flex items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto">
							<div class="">{text}</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	)}
	{isLoading ? 'Loading...' : (
		response && (
			<div class="flex flex-col text-base gap-3 md:px-5 lg:px-1 xl:px-5 w-[90%]">
			<div class="flex relative">
				<div>
					<div class="pt-0.5">
						<div class="gizmo-shadow-stroke flex h-6 w-6 items-center justify-center rounded-full">
							<div class="relative flex">
								IA
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="relative flex w-full">
				<div class="gap-1 md:gap-3">
					<div class="flex flex-grow max-w-full">
						<div class="min-h-[20px] text-message flex items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto">
							<div class="">{response}</div>
						</div>
					</div>
				</div>
			</div>
			</div>
		)
	)}
		<form method="POST" class="flex w-screen md:w-full px-10 justify-center flex-col">
			<div class="relative flex h-full w-full items-stretch md:flex-col">
				<div class="flex w-screen md:w-full items-center">
					<div
						class="overflow-y-hidden w-full flex flex-col flex-grow relative border rounded-2xl bg-white dark:bg-transparent shadow-[0_0_0_2px_rgba(255,255,255,0.95)] dark:shadow-[0_0_0_2px_rgba(52,53,65,0.95)]"
					>
						<span
							id="textarea"
							role="textbox"
							contenteditable
							class=" m-0 pl-3 pr-10 py-[10px] md:pl-5 md:py-4 md:pr-12 resize-none  dark:text-gray-50 bg-transparent placeholder:text-white dark:placeholder:text-gray-50"
						/>
						<button
							class="absolute md:bottom-3 md:right-3 hover:bg-gray-900 hover:bg-transparent right-2 text-white p-0.5  rounded-lg dark:bg-white bottom-1.5 "
						>
							<span>
								<svg
									width="24"
									height="24"
									viewBox="0 0 24 24"
									fill="none"
									class="text-white dark:text-black"
								>
									<path
										d="M7 11L12 6L17 11M12 18V7"
										stroke="currentColor"
										stroke-width="2"
										stroke-linecap="round"
										stroke-linejoin="round"
									>
									</path>
								</svg>
							</span>
						</button>
					</div>
				</div>
			</div>
			<div class="block w-full h-10"></div>
		</form>
</section>

<style>
	#textarea {
		max-height: 200px;
		line-height: 20px;
		overflow: hidden;
	}
	#textarea[contenteditable]:empty::before {
		content: "Escribe algo";
		color: gray;
	}
</style>
